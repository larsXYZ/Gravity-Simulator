/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// TGUI - Texus' Graphical User Interface
// Copyright (C) 2012-2024 Bruno Van de Velde (vdv_b@tgui.eu)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

module;

// Including headers from dependencies inside the module can cause issues.
// So we include all the required headers here so that the includes inside the TGUI source code
// will turn into no-ops.

#define TGUI_MODULE_EXPORT export
#include <TGUI/Config.hpp>

#if !TGUI_EXPERIMENTAL_USE_STD_MODULE
    #include <map>
    #include <set>
    #include <any>
    #include <list>
    #include <array>
    #include <deque>
    #include <regex>
    #include <queue>
    #include <tuple>
    #include <stack>
    #include <chrono>
    #include <string>
    #include <vector>
    #include <thread>
    #include <memory>
    #include <locale>
    #include <limits>
    #include <numbers>
    #include <fstream>
    #include <codecvt>
    #include <iomanip>
    #include <ostream>
    #include <sstream>
    #include <utility>
    #include <version>
    #include <variant>
    #include <numeric>
    #include <iterator>
    #include <iostream>
    #include <charconv>
    #include <typeinfo>
    #include <optional>
    #include <stdexcept>
    #include <typeindex>
    #include <exception>
    #include <algorithm>
    #include <filesystem>
    #include <functional>
    #include <type_traits>
    #include <string_view>
    #include <unordered_map>
    #include <unordered_set>
    #include <initializer_list>

    #include <cmath>
    #include <ctime>
    #include <cstdio>
    #include <cctype>
    #include <cwctype>
    #include <cstring>
    #include <cstddef>
    #include <cstdint>
    #include <cstdlib>
#endif

#include <cassert>

#ifdef TGUI_SYSTEM_WINDOWS
    // raylib.h and windows.h give conflicts
    #if TGUI_HAS_WINDOW_BACKEND_RAYLIB || TGUI_HAS_FONT_BACKEND_RAYLIB || TGUI_HAS_RENDERER_BACKEND_RAYLIB
        #define NOGDI
        #define NOUSER
    #endif

    #include <TGUI/extlibs/IncludeWindows.hpp>
#endif

#if TGUI_USE_SYSTEM_AURORA
    #include <Aurora/SmartPtr/CopiedPtr.hpp>
    #include <Aurora/Tools/Downcast.hpp>
#else
    #include <TGUI/extlibs/Aurora/SmartPtr/CopiedPtr.hpp>
    #include <TGUI/extlibs/Aurora/Tools/Downcast.hpp>
#endif

#if TGUI_HAS_RENDERER_BACKEND_SFML_GRAPHICS || TGUI_HAS_FONT_BACKEND_SFML_GRAPHICS
    #include <SFML/Graphics.hpp>
#elif TGUI_HAS_WINDOW_BACKEND_SFML
    #include <SFML/Window.hpp>
#endif
#if TGUI_HAS_BACKEND_SFML_GRAPHICS && defined(TGUI_SYSTEM_IOS)
  #include <SFML/Main.hpp>
#endif

#if TGUI_HAS_WINDOW_BACKEND_RAYLIB || TGUI_HAS_FONT_BACKEND_RAYLIB || TGUI_HAS_RENDERER_BACKEND_RAYLIB
    #include <raylib.h>

    #if defined(TGUI_SYSTEM_LINUX)
        // Both raylib and X11 define a global Font type. We need to temporarily rename it inside the header to avoid a conflict. This works because we don't use the X11 Font in our code.
        // This needs to be done before including SDL, because otherwise the SDL headers will include the X11 files.
        #define Font TGUI_X11_Font_redefinition
        #include <X11/Xlib.h>
        #undef Font
    #endif
#endif

#if TGUI_HAS_WINDOW_BACKEND_SDL || TGUI_HAS_RENDERER_BACKEND_SDL_RENDERER
    #include <TGUI/extlibs/IncludeSDL.hpp>
#endif
#if TGUI_HAS_WINDOW_BACKEND_SDL
    #if SDL_MAJOR_VERSION < 3
        #include <SDL_syswm.h>
        #include <SDL_touch.h>
    #endif
#endif

#if TGUI_HAS_FONT_BACKEND_SDL_TTF
    #if SDL_MAJOR_VERSION >= 3
        #include <SDL3_ttf/SDL_ttf.h>
    #else
        #include <SDL_ttf.h>
    #endif
#endif

#if TGUI_HAS_FONT_BACKEND_FREETYPE
    #if defined(__GNUC__)
        #pragma GCC diagnostic push
        #pragma GCC diagnostic ignored "-Wold-style-cast"
    #endif

    #include <ft2build.h>
    #include FT_FREETYPE_H
    #include FT_GLYPH_H
    #include FT_OUTLINE_H
    #include FT_BITMAP_H
    #include FT_STROKER_H

    #if defined(__GNUC__)
        #pragma GCC diagnostic pop
    #endif
#endif

#if TGUI_HAS_WINDOW_BACKEND_GLFW
    #define GLFW_INCLUDE_NONE // Don't let GLFW include an OpenGL extention loader
    #include <GLFW/glfw3.h>
#endif

#if defined(TGUI_SYSTEM_LINUX) && defined(TGUI_USE_X11) && ((TGUI_HAS_WINDOW_BACKEND_SFML && SFML_VERSION_MAJOR == 2 && SFML_VERSION_MINOR < 6) || (TGUI_HAS_WINDOW_BACKEND_SDL && SDL_MAJOR_VERSION < 3))
    #include <X11/Xlib.h>
    #include <X11/cursorfont.h>
#endif

#ifdef TGUI_SYSTEM_ANDROID
    #ifdef TGUI_HAS_WINDOW_BACKEND_SFML
        #include <SFML/System/NativeActivity.hpp>
        #include <android/asset_manager_jni.h>
        #include <android/asset_manager.h>
        #include <android/native_activity.h>
        #include <android/configuration.h>
    #endif

    #if TGUI_HAS_WINDOW_BACKEND_SDL
        #include <jni.h>
        #include <android/asset_manager.h>
        #include <android/asset_manager_jni.h>
    #endif
#endif

// Ignore warnings about '#include' still being used below
#if defined(__clang__)
    #pragma clang diagnostic ignored "-Winclude-angled-in-module-purview"
#elif defined(_MSC_VER)
    #pragma warning(disable: 5244)
#endif
